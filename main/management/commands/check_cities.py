from django.core.management.base import BaseCommand
from django.test import RequestFactory
from main.cities_config import CITIES_DATA, get_current_city_data
import os
from django.conf import settings

class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–æ—Ä–æ–¥–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤...'))
        
        factory = RequestFactory()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
        for city_key, city_data in CITIES_DATA.items():
            self.stdout.write(f"\nüìç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞: {city_data['name']} ({city_key})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–æ–º–µ–Ω–∞
            subdomain = city_data['subdomain']
            host = f"{subdomain}.expertsmet.ru"
            
            # –°–æ–∑–¥–∞–µ–º mock request —Å –Ω—É–∂–Ω—ã–º Host
            request = factory.get('/')
            request.META['HTTP_HOST'] = host
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
            detected_city = get_current_city_data(request)
            if detected_city['subdomain'] == subdomain:
                self.stdout.write(f"  ‚úÖ –ü–æ–¥–¥–æ–º–µ–Ω {host} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è")
            else:
                self.stdout.write(self.style.ERROR(f"  ‚ùå –ü–æ–¥–¥–æ–º–µ–Ω {host} –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞ –≥–æ—Ä–æ–¥–∞
            template_path = f"main/city/{city_data['template_folder']}/index.html"
            full_template_path = os.path.join(settings.BASE_DIR, 'main', 'templates', template_path)
            
            if os.path.exists(full_template_path):
                self.stdout.write(f"  ‚úÖ –®–∞–±–ª–æ–Ω {template_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                self.stdout.write(self.style.ERROR(f"  ‚ùå –®–∞–±–ª–æ–Ω {template_path} –ù–ï –ù–ê–ô–î–ï–ù"))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–ª–∞–π–¥—à–æ—É
            slideshow_dir = os.path.join(settings.BASE_DIR, 'slideshow_images', city_data['template_folder'])
            if os.path.exists(slideshow_dir):
                images_count = len([f for f in os.listdir(slideshow_dir) if f.endswith('.webp')])
                self.stdout.write(f"  ‚úÖ –°–ª–∞–π–¥—à–æ—É: –Ω–∞–π–¥–µ–Ω–æ {images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            else:
                self.stdout.write(self.style.WARNING(f"  ‚ö†Ô∏è  –ü–∞–ø–∫–∞ —Å–ª–∞–π–¥—à–æ—É {slideshow_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ALLOWED_HOSTS
        self.stdout.write(f"\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ ALLOWED_HOSTS:")
        for city_key, city_data in CITIES_DATA.items():
            subdomain_host = f"{city_data['subdomain']}.expertsmet.ru"
            if subdomain_host in settings.ALLOWED_HOSTS or '.expertsmet.ru' in settings.ALLOWED_HOSTS:
                self.stdout.write(f"  ‚úÖ {subdomain_host}")
            else:
                self.stdout.write(self.style.ERROR(f"  ‚ùå {subdomain_host} –ù–ï –í ALLOWED_HOSTS"))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        self.stdout.write(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:")
        
        static_files_to_check = [
            'main/fonts/RobotoCondensed-Regular.woff2',
            'main/img/placeholder/400x320.webp',
            'main/css/main.css',
            'main/js/main.js'
        ]
        
        for static_file in static_files_to_check:
            static_path = os.path.join(settings.BASE_DIR, 'main', 'static', static_file)
            if os.path.exists(static_path):
                self.stdout.write(f"  ‚úÖ {static_file}")
            else:
                self.stdout.write(self.style.ERROR(f"  ‚ùå {static_file} –ù–ï –ù–ê–ô–î–ï–ù"))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.stdout.write(f"\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
        self.stdout.write(f"  DEBUG: {settings.DEBUG}")
        self.stdout.write(f"  STATIC_ROOT: {settings.STATIC_ROOT}")
        self.stdout.write(f"  STATICFILES_STORAGE: {getattr(settings, 'STATICFILES_STORAGE', '–ù–µ –∑–∞–¥–∞–Ω')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware
        if 'main.middleware.BlockBotsMiddleware' in settings.MIDDLEWARE:
            self.stdout.write("  ‚úÖ BlockBotsMiddleware –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            self.stdout.write(self.style.ERROR("  ‚ùå BlockBotsMiddleware –ù–ï –ê–ö–¢–ò–í–ï–ù"))
        
        self.stdout.write(self.style.SUCCESS('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'))