version: '3.8'

services:
  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: expertsmet-redis-prod
    volumes:
      - redis_data_prod:/data
    networks:
      - expertsmet-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Django web application
  web:
    build:
      context: .
      dockerfile: expertsmet/Dockerfile
    env_file:
      - .env
    container_name: expertsmet-web-prod
    environment:
      - USE_SQLITE=True
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=False
      - SECRET_KEY=${DJANGO_SECRET_KEY:?DJANGO_SECRET_KEY not set}
      - ALLOWED_HOSTS=80.242.57.136,127.0.0.1,localhost
      - CSRF_TRUSTED_ORIGINS=http://80.242.57.136,http://127.0.0.1,http://localhost
    volumes:
      - static_files_prod:/app/staticfiles
      - media_files_prod:/app/media
      - ./logs:/app/logs
      - ./db.sqlite3:/app/db.sqlite3
    depends_on:
      redis:
        condition: service_started
    networks:
      - expertsmet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: expertsmet-nginx-prod
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_files_prod:/var/www/static:ro
      - media_files_prod:/var/www/media:ro
    depends_on:
      - web
    networks:
      - expertsmet-network
    restart: unless-stopped

volumes:
  redis_data_prod:
    driver: local
  static_files_prod:
    driver: local
  media_files_prod:
    driver: local

networks:
  expertsmet-network:
    driver: bridge
